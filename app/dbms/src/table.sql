/* SET DATABASE */
\c IUTConnect

/* CLEAN DATABASE */
DROP TABLE IF EXISTS step;
DROP TABLE IF EXISTS offer_sector;
DROP TABLE IF EXISTS offer;
DROP TABLE IF EXISTS sector;
DROP TABLE IF EXISTS session;

DROP TABLE IF EXISTS student;
DROP TABLE IF EXISTS employee;
DROP TABLE IF EXISTS tutor;
DROP TABLE IF EXISTS account;
DROP TYPE IF EXISTS role;
DROP TABLE IF EXISTS company;

DROP TABLE IF EXISTS program_event;
DROP TABLE IF EXISTS university_mail;
DROP TABLE IF EXISTS event;
DROP TABLE IF EXISTS program;
DROP TABLE IF EXISTS major;
DROP TABLE IF EXISTS department;
DROP TABLE IF EXISTS year_group;

DROP FUNCTION IF EXISTS create_company;
DROP FUNCTION IF EXISTS create_student;
DROP FUNCTION IF EXISTS create_tutor;
DROP FUNCTION IF EXISTS create_employee;
DROP FUNCTION IF EXISTS create_offer;
DROP FUNCTION IF EXISTS get_offer_sector;

-- Script de création
CREATE TYPE role AS ENUM (
    'tutor',
    'employee',
    'student'
);

-- BUT1, BUT2, BUT3
CREATE TABLE IF NOT EXISTS year_group (
	id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY(START WITH 1 INCREMENT BY 1),
	name TEXT UNIQUE NOT NULL
);

-- TC, GEA, SD, INFO
CREATE TABLE IF NOT EXISTS department (
	id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY(START WITH 1 INCREMENT BY 1),
	name TEXT UNIQUE NOT NULL
);

-- Parcours A, Parcours B, Parcours C, Parcours D
CREATE TABLE IF NOT EXISTS major (
	id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY(START WITH 1 INCREMENT BY 1),
	name TEXT UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS program (
	id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY(START WITH 1 INCREMENT BY 1),
	year_group_id BIGINT REFERENCES year_group (id),
	department_id BIGINT REFERENCES department (id),
	major_id BIGINT REFERENCES major (id)
);

CREATE TABLE IF NOT EXISTS event (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY(START WITH 1 INCREMENT BY 1),
    name TEXT NOT NULL,
    deadline DATE NOT NULL,
    color TEXT DEFAULT '#FF0000',
    icon TEXT DEFAULT 'clipboard-list',
    description TEXT,
    program_id BIGINT REFERENCES program (id)
);


CREATE TABLE IF NOT EXISTS program_event (
    program_id BIGINT REFERENCES program (id), -- * > 1
    event_id BIGINT REFERENCES event (id), -- * > 1
    PRIMARY KEY (program_id, event_id)
);

CREATE TABLE IF NOT EXISTS university_mail (
	id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY(START WITH 1 INCREMENT BY 1),
	university_mail TEXT UNIQUE NOT NULL,
	program_id BIGINT NOT NULL REFERENCES program (id)
);

-- Super-classe de tutor, student, company
CREATE TABLE IF NOT EXISTS account (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY(START WITH 1 INCREMENT BY 1),
    mail TEXT  NOT NULL UNIQUE,
    password TEXT NOT NULL, --email
    name TEXT NOT NULL,
    -- Authentification
    confirmed BOOLEAN NOT NULL DEFAULT false,
    created_at TIMESTAMP NOT NULL DEFAULT (CURRENT_TIMESTAMP(0) AT TIME ZONE 'CEST'),
    -- Héritage
    role role NOT NULL
);

-- Sous-classe de account
CREATE TABLE IF NOT EXISTS tutor (
    account_id BIGINT PRIMARY KEY REFERENCES account (id), -- 1 > 1
    -- mail_ubs TEXT NOT NULL UNIQUE,
    first_name TEXT NOT NULL,
    is_admin BOOLEAN NOT NULL,
    university_mail_id BIGINT REFERENCES university_mail (id)
);

CREATE TABLE IF NOT EXISTS company (
	com_id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY(START WITH 1 INCREMENT BY 1),
	com_name TEXT NOT NULL UNIQUE,
	city TEXT NOT NULL,
    postal_code BIGINT NOT NULL,
    website_url TEXT,
    contact TEXT,
    country TEXT NOT NULL
);

-- Sous-classe de account
CREATE TABLE IF NOT EXISTS employee (
    account_id BIGINT PRIMARY KEY REFERENCES account (id), -- 1 > 1
    company_id BIGINT REFERENCES company (com_id), -- * > 1
	first_name TEXT NOT NULL,
    com_name TEXT
);

-- Sous-classe de account
CREATE TABLE IF NOT EXISTS student (
    account_id BIGINT PRIMARY KEY REFERENCES account (id), -- 1 > 1
    tutor_id BIGINT REFERENCES tutor (account_id), -- * > 1
    -- mail_ubs TEXT NOT NULL UNIQUE,
    first_name TEXT NOT NULL,
    state TEXT,
    bio TEXT,
    CV BYTEA,
    master_name TEXT,
    master_first_name TEXT,
    master_function TEXT,
    master_mail TEXT,
    master_phone TEXT,
    university_mail_id BIGINT REFERENCES university_mail (id)
);

-- Authentification
CREATE TABLE IF NOT EXISTS session (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY(START WITH 1 INCREMENT BY 1) UNIQUE NOT NULL,
    user_id BIGINT REFERENCES account (id), -- * > 1
    user_agent TEXT NOT NULL,
    client_ip TEXT NOT NULL,
    expires_at TIMESTAMP NOT NULL DEFAULT (CURRENT_TIMESTAMP(0) AT TIME ZONE 'CEST' + INTERVAL '30 days'),
    created_at TIMESTAMP NOT NULL DEFAULT (CURRENT_TIMESTAMP(0) AT TIME ZONE 'CEST'),
    PRIMARY KEY (user_id, user_agent, client_ip)
);

CREATE TABLE IF NOT EXISTS sector (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY(START WITH 1 INCREMENT BY 1),
    name TEXT NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS offer (
    id BIGINT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY(START WITH 1 INCREMENT BY 1),
    company_id BIGINT REFERENCES company (com_id), -- * > 1
    -- HEADER
    name TEXT NOT NULL,
    mail TEXT NOT NULL,
    phone TEXT,
    -- BODY
    offer_name TEXT NOT NULL,
    context TEXT,
    result TEXT,
    sector TEXT, -- temp
    tools TEXT, -- temp
    -- DOCUMENTATION
    attachment TEXT,
    url TEXT, -- revoir la taille
    -- Archive
    date DATE NOT NULL DEFAULT NOW(),
    archived BOOLEAN,
    approved BOOLEAN,
    com_name TEXT
);

CREATE TABLE IF NOT EXISTS offer_sector (
    offer_id BIGINT NOT NULL REFERENCES offer (id), -- * > 1
    sector_id BIGINT NOT NULL REFERENCES sector (id), -- * > 1
    PRIMARY KEY (offer_id, sector_id)
);

CREATE TABLE IF NOT EXISTS step (
    student_id BIGINT REFERENCES student (account_id), -- * > 1
    event_id BIGINT REFERENCES event (id), -- * > 1
    is_validated BOOLEAN,
    PRIMARY KEY (student_id, event_id)
);

-- Fonctions publiques

CREATE OR REPLACE FUNCTION create_company(
    -- company
    p_com_name TEXT,
    p_city TEXT,
    p_postal_code BIGINT,
    p_website_url TEXT,
    p_contact TEXT,
    p_country TEXT

)
RETURNS VOID
AS $function$
/*DECLARE
    com_id BIGINT;*/
BEGIN
    -- Insert into company
    INSERT INTO company (com_name, city, postal_code, website_url, contact, country)
    VALUES (p_com_name, p_city, p_postal_code, p_website_url, p_contact, p_country);
    --RETURNING id INTO com_id;

END;
$function$
LANGUAGE plpgsql;

/*
Création d'un étudiant.
  - Nouvelle ligne dans la table account (avec les paramètres notés 'account')
  - Nouvelle ligne dans la table student (avec les paramètres notés 'student')
  - Les ID du account et du student sont les mêmes
*/
CREATE OR REPLACE FUNCTION create_student(p_mail text, p_password text, p_name text, p_university_mail text, p_first_name text)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
DECLARE
    v_account_id BIGINT;
    v_university_mail_id BIGINT;
BEGIN
    -- Insérer le compte utilisateur (account) et récupérer l'ID créé
    INSERT INTO account (mail, password, name, role)
    VALUES (p_mail, p_password, p_name, 'student')
    RETURNING id INTO v_account_id;

    -- Mail universitaire
    SELECT u.id
    FROM university_mail u
    WHERE p_university_mail = university_mail
    INTO v_university_mail_id;

    -- Insérer l'enregistrement étudiant (student) en utilisant l'ID du compte utilisateur
    INSERT INTO student (account_id, university_mail_id, first_name)
    VALUES (v_account_id, v_university_mail_id, p_first_name);
END;
$function$

-- DROP FUNCTION IF EXISTS create_student;

CREATE OR REPLACE FUNCTION create_tutor(p_mail character varying, p_password character varying, p_name character varying, p_university_mail character varying, p_first_name character varying, p_is_admin boolean)
 RETURNS void
 LANGUAGE plpgsql
AS $function$
DECLARE
    v_account_id INT;
    v_university_mail_id INT;
BEGIN
    -- Insérer le compte utilisateur (account) et récupérer l'ID créé
    INSERT INTO account (mail, password, name, role)
    VALUES (p_mail, p_password, p_name, 'tutor')
    RETURNING id INTO v_account_id;
    
    -- Mail universitaire
    SELECT um.id
    FROM university_mail um
    WHERE p_university_mail = um.university_mail
    INTO v_university_mail_id;

    -- Insérer l'enregistrement tuteur en utilisant l'ID du compte utilisateur
    INSERT INTO tutor (account_id, university_mail_id, first_name, is_admin)
    VALUES (v_account_id, v_university_mail_id, p_first_name, 'false');
END;
$function$

-- DROP FUNCTION IF EXISTS create_tutor;

CREATE OR REPLACE FUNCTION create_employee(
    -- account
    p_mail TEXT,
    p_password TEXT,
    p_name TEXT,
    -- employee
    p_first_name TEXT,
    p_com_name TEXT
)
RETURNS VOID
AS $function$
DECLARE
    account_id BIGINT;
BEGIN
    -- Insert into account
    INSERT INTO account (mail, password, name, role)
    VALUES (p_mail, p_password, p_name, 'employee')
    RETURNING id INTO account_id;

    -- Insert into the employee table
    INSERT INTO employee (account_id, first_name, com_name)
    VALUES (account_id, p_first_name, p_com_name);
END;
$function$
LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION create_offer(
    -- offer
    p_sector TEXT,
    p_com_name TEXT,
    p_name TEXT,
    p_attachment TEXT,
    p_offer_name TEXT,
    p_context TEXT,
    p_tools TEXT,
    p_result TEXT,
    p_contact TEXT,
    p_website_url TEXT


)
RETURNS VOID
AS $function$
/*DECLARE
    com_id BIGINT;*/
BEGIN
    -- Insert into offer
    INSERT INTO offer (company_id, com_name, name, mail, offer_name, context, result, sector, tools, attachment, url, archived, approved)
    VALUES (null, p_com_name, p_name, p_contact, p_offer_name, p_context, p_result, p_sector, p_tools, p_attachment, p_website_url, FALSE, FALSE);
    --RETURNING id INTO com_id;

END;
$function$
LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION get_offer_sector (
	p_id Offer.id%TYPE,
	OUT str TEXT
)
	RETURNS TEXT
AS
$BODY$
DECLARE
	v_sector RECORD;
BEGIN
	str := '';
	FOR v_sector IN (
		SELECT 
			Sector.name
		FROM 
			Sector, 
			Offer_Sector
		WHERE
			Offer_Sector.offer_id = p_id
		AND
			Sector.id = Offer_Sector.sector_id
	) LOOP
		str := str || CAST ( v_sector AS TEXT);
		
	END LOOP;
	str := REPLACE(str,'"','');
	str := REPLACE(str,')(',',');
	str := REPLACE(str,'(','');
	str := REPLACE(str,')','');
END;
$BODY$
LANGUAGE plpgsql;
